rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {

		match /spotifyCredentials/{uid} {
			// Can only access your own credentials
			allow read, write: if request.auth.uid == uid;
		}

		match /filteredPlaylists/{playlistId} {

			// Check if user created the current filtered playlist
			function isOgUser() {
				return request.auth.uid != null && request.auth.uid == resource.data.createdBy;
			}

			allow create: if request.auth.uid != null
				&& request.auth.uid == request.resource.data.createdBy
				&& request.resource.data.keys().hasOnly(['createdBy', 'originId']);
			allow update: if isOgUser()
				&& request.resource.data.keys().hasOnly(['createdBy', 'originId']);
			allow read: if isOgUser();
		}

		function authorizedPlaylist(playlistId) {
			return request.auth.uid != null
				&& request.auth.uid == get(/databases/$(database)/documents/filteredPlaylists/$(playlistId)).data.createdBy;
		}

		match /filterCriteria/{criteriaId} {

			allow create: if authorizedPlaylist(request.resource.data.playlistId)
				&& request.resource.data.keys().hasOnly(['playlistId', 'order', 'purpose', 'description']);
			allow update: if authorizedPlaylist(resource.data.playlistId)
				&& request.resource.data.keys().hasOnly(['playlistId', 'order', 'purpose', 'description']);
			allow read: if authorizedPlaylist(resource.data.playlistId);
		}

		match /filterActions/{actionId} {

			allow create: if authorizedPlaylist(request.resource.data.playlistId)
				&& request.resource.data.keys().hasOnly(['playlistId', 'order', 'ifType', 'ifId', 'thenType', 'thenId']);
			allow update: if authorizedPlaylist(resource.data.playlistId)
				&& request.resource.data.keys().hasOnly(['playlistId', 'order', 'ifType', 'ifId', 'thenType', 'thenId']);
			allow read: if authorizedPlaylist(resource.data.playlistId);
		}

	}
}
